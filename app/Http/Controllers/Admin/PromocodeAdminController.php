<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Promocode;
use Carbon\Carbon;
use Illuminate\Support\Str;

class PromocodeAdminController extends Controller
{
    public function index(Request $request)
    {
        $query = Promocode::query();

        if ($request->filled('search')) {
            $query->where('code', 'like', '%' . $request->search . '%');
        }

        if ($request->filled('status')) {
            if ($request->status === 'used') {
                $query->whereNotNull('used_by');
            } elseif ($request->status === 'expired') {
                $query->whereNotNull('expires_at')->where('expires_at', '<', now());
            } elseif ($request->status === 'active') {
                $query->where(function ($q) {
                    $q->whereNull('expires_at')->orWhere('expires_at', '>', now());
                })->whereNull('used_by');
            }
        }

        $promocodes = $query->latest()->paginate(15);

        return view('admin.promocodes.index', compact('promocodes'));
    }

    public function create()
    {
        return view('admin.promocodes.create');
    }

    public function store(Request $request)
    {
        $validated = $request->validate([
            'points' => 'required|integer|min:1',
            'count' => 'required|integer|min:1|max:100',
            'expires_at' => 'nullable|date|after:now',
        ]);

        $codes = [];

        for ($i = 0; $i < $validated['count']; $i++) {
            $codes[] = [
                'code' => strtoupper(Str::random(10)), // Autogenerated code
                'points' => $validated['points'],
                'expires_at' => $validated['expires_at'] ?? null,
                'created_at' => now(),
                'updated_at' => now(),
            ];
        }

        Promocode::insert($codes); // Bulk insert

        return redirect()->route('admin.promocodes.index')->with('success', 'تم إنشاء الرموز الترويجية بنجاح.');
    }

    public function edit($id)
    {
        $promocode = Promocode::findOrFail($id);
        return view('admin.promocodes.edit', compact('promocode'));
    }

    public function update(Request $request, $id)
    {
        $promocode = Promocode::findOrFail($id);

        $request->validate([
            'points' => 'required|integer|min:1',
            'expires_at' => 'nullable|date',
        ]);

        $promocode->points = $request->input('points');
        $promocode->expires_at = $request->input('expires_at');
        $promocode->save();

        return redirect()->route('admin.promocodes.index')->with('success', 'تم تحديث الرمز الترويجي بنجاح');
    }

    public function bulkDelete(Request $request)
    {
        $ids = $request->input('ids', []);
        if (!empty($ids)) {
            Promocode::whereIn('id', $ids)->delete();
            return redirect()->back()->with('success', 'تم حذف الرموز المحددة بنجاح.');
        }

        return redirect()->back()->with('error', 'لم يتم تحديد رموز للحذف.');
    }


}
